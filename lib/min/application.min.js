var $$ = {
    trimFromStart: function (val, i) {
        var str = _(val).toString();
        return str.substring(0, i);
    },

    trimFromEnd: function (val, i) {
        var str = _(val).toString(),
            start = str.length - i;

        return str.substring(start, (start + i));
    }
};
var Converter;

(function(_) {
    'use strict';

    Converter = function (conversions) {
        this.conversions = conversions;
        this.unitType = null;
    };

    _.extend(Converter.prototype, {
        getUnitTypes: function () {
            return _.mapValues(this.conversions, function (x) {
                return {
                    label: x.name,
                    default: x.default
                };
            });
        },

        getUnit: function (unit) {
            return this.getUnits()[unit];
        },

        getDefaultFromUnit: function () {
            return this.getUnitTypes()[this.getUnitType()].default[0];
        },

        getDefaultToUnit: function () {
            return this.getUnitTypes()[this.getUnitType()].default[1];
        },

        getUnits: function (type) {
            type = type || this.getUnitType();

            return _.mapValues(this.conversions[type].units, function (x) {
                return {
                    label: x.name,
                    symbol: x.symbol
                };
            });
        },

        setUnitType: function (type) {
            if (this.conversions[type] === undefined) {
                throw "unknown type";
            }

            this.unitType = type;
        },

        getUnitType: function () {
            return this.unitType;
        },

        convertAll: function (value, fromUnit) {
            var self = this;
            return _.mapValues(this.conversions[this.getUnitType()].units, function (x, toUnit) {
                if (toUnit === fromUnit) {
                    return null;
                }

                return {
                    label: x.name,
                    symbol: x.symbol,
                    value: self.convert(value, fromUnit, toUnit)
                };
            });
        },

        convert: function (value, fromUnit, toUnit) {
            var result = this.tryConvert(value, fromUnit, toUnit);
            if (_.isNull(result)) {
                throw 'No way to convert' + fromUnit + ' to ' + toUnit;
            } else {
                return result;
            }
        },

        tryConvert: function (value, fromUnit, toUnit) {
            if (fromUnit === toUnit) return value;

            var units = this.conversions[this.getUnitType()].units;
            var convertedValue = null;

            if (units[fromUnit] === undefined) {
                throw "unknown from unit " + fromUnit + " of type " + this.getUnitType();
            }

            if (units[toUnit] === undefined) {
                throw "unknown to unit " + toUnit + " of type " + this.getUnitType();
            }

            // If a direct conversion can be made
            if (!_.isUndefined(units[fromUnit].conv[toUnit])) {
                return value * units[fromUnit].conv[toUnit];
            }

            // Iterate through units to find a possible conversion
            for (var u in units[fromUnit].conv) {
                convertedValue = this.convert(value * units[fromUnit].conv[u], u, toUnit);

                if (!_.isNull(convertedValue)) {
                    return convertedValue;
                }
            }

            // No conversion found
            return null;
        }
    });
})(window._);
var CategoryMenu;

(function($, _){
    'use strict';

    CategoryMenu = function(el, items) {
        this.el = el;
        this.$el = $(el);
        this.items = items;
        this.init();
    };

    _.extend(CategoryMenu.prototype, {
        init: function() {
            _.bindAll(this, '_handleCategoryClick');

            var self = this;

            self.ui = {
                nav: self.$el.find('nav'),
                list: self.$el.find('ul')
            };

            self._renderItems();

            self.ui.nav.find('button').hammer().on({
                tap: self._handleCategoryClick
            });
        },

        _renderItems: function () {
            var self = this;

            _.each(_.keys(self.items), function (key) {
                self.ui.list.append('<li><button type="button" data-unit-type="' + key + '">' + self.items[key].label + '</button></li>');
            });
        },

        clearActive: function() {
            this.$el.find('.active').removeClass('active');
        },

        setActive: function (item) {
            this.clearActive();
            this.$el.find('button[data-unit-type="' + item + '"]').closest('li').addClass('active');
        },

        getActive: function() {
            return this.ui.nav.find('.active button').attr('data-unit-type');
        },

        _handleCategoryClick: function(e){
            this.$el.trigger('click:item', $(e.currentTarget).attr('data-unit-type'));
        }
    });
})(jQuery, window._);
var ConversionWindow;

(function($, _, $$){
    'use strict';

    ConversionWindow = function(el) {
        this.el = el;
        this.$el = $(el);
        this.init();
    };

    _.extend(ConversionWindow.prototype, {
        init: function() {
            _.bindAll(this, 'backspace', '_handleFromUnitTap', '_handleToUnitTap');

            var self = this;

            self.ui = {
                from: self.$el.find('.convert-from'),
                to: self.$el.find('.convert-to')
            };

            self.ui.from.hammer({swipe_velocity: 0.3}).on({
                swipeleft: self.backspace
            });

            self.ui.from.hammer().on({
                tap: self._handleFromUnitTap
            });

            self.ui.to.hammer().on({
                tap: self._handleToUnitTap
            });
        },

        _scaleFont: function (elem) {
            elem = elem.find('.value');

            if (elem.text().length > 6) {
                elem.toggleClass('small', true);
            } else {
                elem.toggleClass('small', false);
            }
        },

        getFromValue: function (asNumber) {
            return (asNumber) ? Number(this.ui.from.find('.value').text()) : this.ui.from.find('.value').text();
        },

        setFromValue: function (val, silent) {
            this.ui.from.find('.value').text($$.trimFromStart(val, 13));
            this._scaleFont(this.ui.from);
            if(!silent) { this.triggerChange(); }
        },

        getFromUnit: function () {
            return this.ui.from.find('.unit').attr('data-unit');
        },

        setFromUnit: function (unitId, obj) {
            this.ui.from.find('.unit').text(obj.symbol).attr('data-unit', unitId);
        },

        setToValue: function (val) {
            this.ui.to.find('.value').text($$.trimFromStart(val, 13));
            this._scaleFont(this.ui.to);
        },

        getToUnit: function () {
            return this.ui.to.find('.unit').attr('data-unit');
        },

        setToUnit: function (unitId, obj) {
            this.ui.to.find('.unit').text(obj.symbol).attr('data-unit', unitId);
        },

        triggerChange: function () {
            this.$el.trigger('change:fromValue', this.getFromValue());
        },

        backspace: function () {
            if(this.getFromValue().length > 1) {
                this.setFromValue($$.trimFromStart(this.getFromValue(), this.getFromValue().length - 1));
            } else {
                this.$el.trigger('clear:fromValue');
            }
        },

        _handleFromUnitTap: function () {
            this.$el.trigger('choose:from:unit');
        },

        _handleToUnitTap: function () {
            this.$el.trigger('choose:to:unit');
        }
    });
})(jQuery, window._, window.$$);
var Calculator;

(function($, _){
    'use strict';

    Calculator = function(el) {
        this.el = el;
        this.$el = $(el);
        this.init();
    };

    _.extend(Calculator.prototype, {
        init: function() {
            _.bindAll(this, '_handleEvaluateClick', '_handleDigitClick', '_handleFunctionClick', '_handleOperatorClick');

            var self = this;

            self.$el.find('.digit').hammer().on({
                touch: self._handleDigitClick
            });

            self.$el.find('.function').hammer().on({
                touch: self._handleFunctionClick
            });

            self.$el.find('.operator').hammer().on({
                touch: self._handleOperatorClick
            });

            self.$el.find('.evaluate').hammer().on({
                touch: self._handleEvaluateClick
            });
        },

        removeHighlight: function () {
            this.$el.find('.highlighted').removeClass('highlighted');
        },

        evaluate: function () {
            this.$el.trigger('evaluate');
        },

        _handleEvaluateClick: function () {
            this.removeHighlight();
            this.evaluate();
        },

        _handleDigitClick: function (e) {
            this.removeHighlight();

            if ($(e.currentTarget).hasClass('decimal')) {
                this.$el.trigger('decimal');
            } else {
                this.$el.trigger('digit', Number($(e.currentTarget).text()));
            }
        },

        _handleFunctionClick: function (e) {
            var func = $(e.currentTarget).attr('data-func');

            switch (func) {
                case 'percent':
                    this.$el.trigger('percent');
                    break;

                case 'clear':
                    this.$el.trigger('clear');
                    break;

                case 'inverse':
                    this.$el.trigger('invert');
                    break;

                default:
                    console.log('No handler set for function: ' + func);
                    break;
            }
        },

        _handleOperatorClick: function (e) {
            if (this.$el.find('.highlighted').length > 0) {
                this.$el.trigger('new:operation');
                this.removeHighlight();
            }

            $(e.currentTarget).addClass('highlighted');
            this.$el.trigger($(e.currentTarget).attr('data-operation'));
        }
    });
})(jQuery, window._);
var UnitPicker;

(function($, _){
    'use strict';

    UnitPicker = function(units) {
        this.units = units;
        this.$el = $('<div class="unit-picker" style="display: none;" />');
        this.init();
    };

    _.extend(UnitPicker.prototype, {
        init: function() {
            _.bindAll(this, '_handleUnitTap');

            this._renderUnits();
        },

        _renderUnits: function () {
            var self = this;

            _.each(_.keys(self.units), function (unit) {
                self.$el.append('<li><button type="button" data-symbol="' + self.units[unit].symbol + '" data-unit="' + unit + '">' + self.units[unit].label + '</button></li>');
            });

            self.$el.wrapInner('<nav><ul /></nav>');
        },

        show: function () {
            var self = this;

            self.$el.find('button').hammer().on({
                tap: self._handleUnitTap
            });

            self.$el.fadeIn(300);
        },

        destroy: function () {
            var self = this;

            self.$el.fadeOut(100, function () {
                self.$el.remove();
            });
        },

        clearActive: function () {
            this.$el.find('.active').removeClass('active');
        },

        setActive: function (unit) {
            this.$el.find('[data-unit="' + unit + '"]').closest('li').addClass('active');
        },

        _handleUnitTap: function (e) {
            this.clearActive();
            this.setActive($(e.currentTarget).attr('data-symbol'));
            this.$el.trigger('new:unit', $(e.currentTarget).attr('data-unit'));
        }
    });
})(jQuery, window._);
var App;

(function($, _, Converter, CategoryMenu, ConversionWindow, Calculator, Conversions, UnitPicker){
    'use strict';

    App = function(el) {
        this.el = el;
        this.$el = $(el);
    };

    _.extend(App.prototype, {
        init: function() {
            _.bindAll(this, '_handleToggleClick', '_handleSwipeLeft', '_handleSwipeRight', 'updateUnitType', '_handleMenuItemClick', '_handlePercent', '_handleDigit', '_handleDecimal', '_handleClear', '_handleInvert', '_handleAdd', '_handleSubtract', '_handleDivide', '_handleMultiply', '_handleEvaluate', 'updateConversions', '_handleChooseFromUnit', '_handleChooseToUnit');

            var self = this;

            self.ui = {
                toggle: self.$el.find('.toggle'),
                menu: self.$el.find('.unit-category'),
                conversions: self.$el.find('.conversions'),
                calc: self.$el.find('.calc'),
                stage: self.$el.find('.stage')
            };

            self.converter = new Converter(Conversions);
            self.menu = new CategoryMenu(this.ui.menu[0], this.converter.getUnitTypes());
            self.conversion = new ConversionWindow(this.ui.conversions[0]);
            self.calc = new Calculator(this.ui.calc[0]);

            self.silentClear = true;
            self.silentDigit = false;

            self.ui.toggle.hammer().on({
                tap: self._handleToggleClick
            });

            self.$el.find('.stage').hammer().on({
                dragleft: self._handleSwipeLeft,
                dragright: self._handleSwipeRight
            });

            self.menu.$el.bind({
                'click:item': self._handleMenuItemClick
            });

            self.conversion.$el.bind({
                'change:fromValue': self.updateConversions,
                'clear:fromValue': self._handleClear,
                'choose:from:unit': self._handleChooseFromUnit,
                'choose:to:unit': self._handleChooseToUnit
            });

            self.calc.$el.bind({
                'digit': self._handleDigit,
                'decimal': self._handleDecimal,
                'percent': self._handlePercent,
                'clear': self._handleClear,
                'invert': self._handleInvert,
                'add': self._handleAdd,
                'subtract': self._handleSubtract,
                'divide': self._handleDivide,
                'multiply': self._handleMultiply,
                'evaluate': self._handleEvaluate
            });

            this.updateUnitType(_.first(_.keys(this.converter.getUnitTypes())));
        },

        getSilentClear: function () {
            return this.silentClear;
        },

        setSilentClear: function (val) {
            this.silentClear = val;
        },

        getSilentDigit: function () {
            return this.silentDigit;
        },

        setSilentDigit: function (val) {
            this.silentDigit = val;
        },

        toggleOpen: function(isOpen) {
            if(_.isUndefined(isOpen)) { isOpen = !this.isOpen(); }
            this.$el.toggleClass('menu-open', isOpen);
        },

        isOpen: function() {
            return this.$el.hasClass('menu-open');
        },

        updateConversions: function () {
            console.log('Convert ' + this.conversion.getFromValue(true) + ' ' + this.conversion.getFromUnit() + ' to ' + this.conversion.getToUnit());
            var converted = this.converter.convert(this.conversion.getFromValue(true), this.conversion.getFromUnit(), this.conversion.getToUnit());
            this.conversion.setToValue(this._roundDecimal(converted, 10));
        },

        updateUnitType: function (item) {
            this.toggleOpen(false);
            this.converter.setUnitType(item);
            this.menu.setActive(this.converter.getUnitType());
            this.conversion.setFromUnit(this.converter.getDefaultFromUnit(), this.converter.getUnit(this.converter.getDefaultFromUnit()));
            this.conversion.setToUnit(this.converter.getDefaultToUnit(), this.converter.getUnit(this.converter.getDefaultToUnit()));this._handleClear();
        },

        _operationPrep: function () {
            this.calc.evaluate();
            this.setSilentClear(true);
            this.setSilentDigit(true);
        },

        _handleToggleClick: function () {
            this.toggleOpen();
        },

        _handleSwipeLeft: function () {
            this.toggleOpen(false);
        },

        _handleSwipeRight: function () {
            this.toggleOpen(true);
        },

        _handleMenuItemClick: function (e, item) {
            this.updateUnitType(item);
        },

        _handleDigit: function (e, digit) {
            var val = (this.getSilentClear()) ? digit : this.conversion.getFromValue() + digit;
            this.conversion.setFromValue(val, this.getSilentDigit());
            this.setSilentClear(false);
        },

        _handleDecimal: function () {
            // Make sure there isn't already a decimal
            if (this.conversion.getFromValue().indexOf('.') === -1) {
                this.conversion.setFromValue(this.conversion.getFromValue() + '.', this.getSilentDigit());
            } else if (this.getSilentClear()) {
                this.conversion.setFromValue('0.', this.getSilentDigit());
            }

            this.setSilentClear(false);
        },

        _handlePercent: function () {
            this.conversion.setFromValue(this.conversion.getFromValue(true) / 100);
        },

        _handleClear: function () {
            this.calc.evaluate();
            this.conversion.setFromValue(0, this.getSilentDigit());
            this.setSilentClear(true);
            this.setSilentDigit(false);
        },

        _handleChooseFromUnit: function () {
            var self = this,
                view = new UnitPicker(self.converter.getUnits());

            view.$el.one('new:unit', function (e, unit) {
                console.log(unit);
                console.log(self.converter.getUnits()[unit]);
                self.conversion.setFromUnit(unit, self.converter.getUnits()[unit]);
                self.updateConversions();
                view.destroy();
            });

            view.setActive(self.conversion.getFromUnit());
            self.$el.prepend(view.$el);
            view.show();
        },

        _handleChooseToUnit: function () {
            var self = this,
                view = new UnitPicker(self.converter.getUnits());

            view.$el.one('new:unit', function (e, unit) {
                self.conversion.setToUnit(unit, self.converter.getUnits()[unit]);self.updateConversions();
                view.destroy();
            });

            view.setActive(self.conversion.getToUnit());
            self.$el.prepend(view.$el);
            view.show();
        },

        _handleInvert: function () {
            if(this.conversion.getFromValue(true) === 0) {
                this.conversion.setFromValue('-', true);
            } else {
                this.conversion.setFromValue(this.conversion.getFromValue(true) * -1, this.getSilentDigit());
            }

            this.setSilentClear(false);

        },

        _handleAdd: function () {
            this._operationPrep();

            var self = this,
                mem = self.conversion.getFromValue(true);

            self.calc.$el.one('new:operation', function () {
                console.log('forgetting operation');
                self.calc.$el.off('evaluate');
            });

            self.calc.$el.one('evaluate', function () {
                console.log('performing operation');
                self.calc.$el.off('new:operation');
                self.setSilentDigit(false);
                self.conversion.setFromValue(mem + self.conversion.getFromValue(true), self.getSilentDigit());
            });
        },

        _handleSubtract: function () {
            this._operationPrep();

            var self = this,
                mem = self.conversion.getFromValue(true);

            self.calc.$el.one('evaluate', function () {
                self.setSilentDigit(false);
                self.conversion.setFromValue(mem - self.conversion.getFromValue(true), self.getSilentDigit());
            });
        },

        _handleDivide: function () {
            this._operationPrep();

            var self = this,
                mem = self.conversion.getFromValue(true);

            mem = self.conversion.getFromValue(true);

            self.calc.$el.one('evaluate', function () {
                self.setSilentDigit(false);
                self.conversion.setFromValue(mem / self.conversion.getFromValue(true), self.getSilentDigit());
            });
        },

        _handleMultiply: function () {
            this._operationPrep();

            var self = this,
                mem = self.conversion.getFromValue(true);

            self.calc.$el.one('evaluate', function () {
                self.setSilentDigit(false);
                self.conversion.setFromValue(mem * self.conversion.getFromValue(true), self.getSilentDigit());
            });
        },

        _handleEvaluate: function () {
            this.setSilentClear(true);
            this.setSilentDigit(false);
        },

        _roundDecimal: function (number, places) {
            var rounded = +(Math.round(number + ("e+" + places))  + ("e-" + places));
            return _.isNaN(rounded) ? Math.round(number) : rounded;
        }
    });
})(jQuery, window._, window.Converter, window.CategoryMenu, window.ConversionWindow, window.Calculator, window.Conversions, window.UnitPicker);
var app;

(function($){
    'use strict';

    var UA = navigator.userAgent,
        ios = (UA.match(/(iPad|iPhone|iPod)/g)) ? true : false,
        msafari = (UA.match(/Safari/i) && !UA.match(/Chrome/i) && !UA.match(/CriOS/i)) ? true : false;

    $(document).ready(function() {
        if (!window.navigator.standalone && ios) {
            if(!msafari) { $('#install .message').html('You must be using Safari to install <strong>thistothat</strong>'); }
        } else {
            $('#install').remove();
        }

        $('body').bind({
            touchmove: function (e) {
                e.preventDefault();
            }
        });

        $('#install').remove();

        app = new App($('body')[0]);
        app.init();
    });
})(window.jQuery);